using CK.Core;
using Microsoft.Extensions.DependencyInjection;
using CK.Setup;
using System;

namespace CK.Testing.StObjMap
{
    /// <summary>
    /// Gives access to one or more StObjMaps by loading them from existing generated assemblies.
    /// </summary>
    public interface IStObjMapTestHelperCore
    {
        /// <summary>
        /// The prefix of the <see cref="BinPathName"/>.
        /// </summary>
        public const string BinPathNamePrefix = "StObjMapTest";

        /// <summary>
        /// Gets the name of the BinPath that must be used for setup.
        /// Initially "StObjMapTest".
        /// The generated assembly name in the <see cref="IBasicTestHelper.BinFolder"/> must be <c>$"CK.StObj.AutoAssembly-{BinPathName}.dll"</c>.
        /// <para>
        /// This is updated each time <see cref="ResetStObjMap"/> is called with an incremented number starting at 1.
        /// </para>
        /// </summary>
        string BinPathName { get; }

        /// <summary>
        /// Highest entry point possible: this gives a ready to use shared service provider based on the current <see cref="StObjMap"/>.
        /// Note that this AutomaticServices will resolve (and keep) singletons AND scoped services. To obtain a "fresh" set of services,
        /// use <see cref="CreateAutomaticServices"/>.
        /// The returned services can be configured thanks to the <see cref="AutomaticServicesConfiguring"/>
        /// and <see cref="AutomaticServicesConfigured"/> events.
        /// This throws if any error prevents the services to be correctly configured.
        /// </summary>
        IServiceProvider AutomaticServices { get; }

        /// <summary>
        /// Creates and configures a pristine service provider based on the current <see cref="StObjMap"/>.
        /// The returned services can be automatically configured thanks to the <see cref="AutomaticServicesConfiguring"/>
        /// and <see cref="AutomaticServicesConfigured"/> events.
        /// This throws if any error prevents the services to be correctly configured.
        /// <para>
        /// Note that the <see cref="ServiceProvider"/> is a <see cref="IDisposable"/> object: it SHOULD be disposed once done with it.
        /// </para>
        /// </summary>
        /// <param name="startupServices">Optional startup services container.</param>
        /// <returns>A new service provider.</returns>
        ServiceProvider CreateAutomaticServices( SimpleServiceContainer? startupServices = null );

        /// <summary>
        /// Fires before the future <see cref="AutomaticServices"/> or a new one created by <see cref="CreateAutomaticServices(SimpleServiceContainer?)"/>
        /// is configured by the <see cref="StObjMap"/>: this enables external code to configure/alter the startup services and
        /// the <see cref="StObjContextRoot.ServiceRegister.StartupServices"/> before the <see cref="StObjContextRoot.ServiceRegister.AddStObjMap(IStObjMap)"/> call.
        /// </summary>
        event EventHandler<AutomaticServicesConfigurationEventArgs> AutomaticServicesConfiguring;

        /// <summary>
        /// Fires after the future <see cref="AutomaticServices"/> or a new one created by <see cref="CreateAutomaticServices(SimpleServiceContainer?)"/>
        /// have been configured by the <see cref="StObjMap"/> but before making it available to others.
        /// External code can configure/alter the configured services.
        /// </summary>
        event EventHandler<AutomaticServicesConfigurationEventArgs> AutomaticServicesConfigured;

        /// <summary>
        /// Gets the <see cref="IStObjMap"/> from the current <see cref="BinPathName"/>, recreating a new <c>CK.StObj.AutoAssembly-StObjMapTestXXX.dll</c>
        /// in the <see cref="IBasicTestHelper.BinFolder"/> if needed.
        /// </summary>
        IStObjMap StObjMap { get; }

        /// <summary>
        /// Gets whether a failed attempt to obtain the <see cref="StObjMap"/> should be ignored: subsequent attempt to
        /// get it will trigger a full resolution.
        /// By default, this is "StObjMap/StObjMapRetryOnError" configuration that is false: if the first attempt to obtain the
        /// current <see cref="StObjMap"/> failed, subsequent attempts immediately throw.
        /// <para>
        /// Note that calls to <see cref="ResetStObjMap(bool)"/> resets any current load error.
        /// </para>
        /// </summary>
        bool StObjMapRetryOnError { get; set; }

        /// <summary>
        /// Fires whenever the <see cref="StObjMap"/> is accessed.
        /// This allows external code to handle map lifetime: see <see cref="StObjMapAccessedEventArgs"/>.
        /// </summary>
        event EventHandler<StObjMapAccessedEventArgs> StObjMapAccessed;

        /// <summary>
        /// Resets the <see cref="StObjMap"/>: internally sets it to null and increments the <see cref="BinPathName"/> suffix
        /// so that a new dll must be generated by <see cref="StObjMapLoading"/>.
        /// </summary>
        /// <param name="deleteGeneratedBinFolderAssembly">
        /// By default, <see cref="DeleteGeneratedAssemblies(string)"/> is called on the <see cref="IBasicTestHelper.BinFolder"/>.
        /// </param>
        void ResetStObjMap( bool deleteGeneratedBinFolderAssembly = true );

        /// <summary>
        /// Fires the first time the <see cref="StObjMap"/> on current <see cref="BinPathName"/>
        /// must be loaded.
        /// Enables external code to actually generate the <c>$"CK.StObj.AutoAssembly-{BinPathName}.dll"</c> assembly
        /// in the <see cref="IBasicTestHelper.BinFolder"/> and the G0.cs file in <see cref="IBasicTestHelper.TestProjectFolder"/>
        /// if needed.
        /// </summary>
        event EventHandler StObjMapLoading;

        /// <summary>
        /// Deletes all files like <c>"CK\.StObj\.AutoAssembly-StObjMapTest\d*\.dll"</c> in the specified directory.
        /// </summary>
        /// <param name="directory">The directory from which generated assembly(ies) must be deleted.</param>
        /// <returns>The number of deleted files.</returns>
        int DeleteGeneratedAssemblies( string directory );

    }
}
